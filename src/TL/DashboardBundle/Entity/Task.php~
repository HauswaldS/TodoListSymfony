<?php

namespace TL\DashboardBundle\Entity;

use Doctrine\ORM\Mapping as ORM;
use Symfony\Component\Validator\Constraints as Assert;
/**
 * Task
 *
 * @ORM\Table(name="tl_task")
 * @ORM\Entity(repositoryClass="TL\DashboardBundle\Repository\TaskRepository")
 * @ORM\HasLifecycleCallbacks()
 */
class Task
{
    /**
     * @var int
     *
     * @ORM\Column(name="id", type="integer")
     * @ORM\Id
     * @ORM\GeneratedValue(strategy="AUTO")
     */
    private $id;

    /**
     * @var bool
     *
     * @ORM\Column(name="status", type="boolean")
     */
    private $status;

    /**
     * @var string
     *
     * @ORM\Column(name="content", type="text")
     * @Assert\Length(min=5, minMessage="The minimum lenght for the task content is 5 caracters")
     */
    private $content;

    /**
     * @var bool
     *
     * @ORM\Column(name="priority", type="boolean")
     */
    private $priority;

    /**
     * @var \DateTime
     *
     * @ORM\Column(name="created_at", type="datetime")
     * @Assert\DateTime()
     */
    private $createdAt;

    /**
     * @var \DateTime
     *
     * @ORM\Column(name="finished_at", type="datetime", nullable=true)
     * @Assert\DateTime()
     */
    private $finishedAt;

    /**
     * @var TL\DashboardBundle\Entity\Folder
     *
     * @ORM\ManyToOne(targetEntity="TL\DashboardBundle\Entity\Folder", inversedBy="tasks")
     * @ORM\JoinColumn(nullable=false)
     */
     private $folder;

    public function __construct()
    {
        $this->createdAt = new \Datetime('now');
        $this->finishedAt = null;
        $this->status = false;
    }

    /**
     * Get id
     *
     * @return integer
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * Set status
     *
     * @param boolean $status
     *
     * @return Task
     */
    public function setStatus($status)
    {
        $this->status = $status;

        return $this;
    }

    /**
     * Get status
     *
     * @return boolean
     */
    public function getStatus()
    {
        return $this->status;
    }

    /**
     * Set content
     *
     * @param string $content
     *
     * @return Task
     */
    public function setContent($content)
    {
        $this->content = $content;

        return $this;
    }

    /**
     * Get content
     *
     * @return string
     */
    public function getContent()
    {
        return $this->content;
    }

    /**
     * Set priority
     *
     * @param boolean $priority
     *
     * @return Task
     */
    public function setPriority($priority)
    {
        $this->priority = $priority;

        return $this;
    }

    /**
     * Get priority
     *
     * @return boolean
     */
    public function getPriority()
    {
        return $this->priority;
    }

    /**
     * Set createdAt
     *
     * @param \DateTime $createdAt
     *
     * @return Task
     */
    public function setCreatedAt($createdAt)
    {
        $this->createdAt = $createdAt;

        return $this;
    }

    /**
     * Get createdAt
     *
     * @return \DateTime
     */
    public function getCreatedAt()
    {
        return $this->createdAt;
    }

    /**
     * Set folder
     *
     * @param \TL\DashboardBundle\Entity\Folder $folder
     *
     * @return Task
     */
    public function setFolder(\TL\DashboardBundle\Entity\Folder $folder)
    {
        $this->folder = $folder;

        return $this;
    }

    /**
     * Get folder
     *
     * @return \TL\DashboardBundle\Entity\Folder
     */
    public function getFolder()
    {
        return $this->folder;
    }

    /**
     * Set endDate
     *
     * @param \DateTime $endDate
     *
     * @return Task
     */
    public function setEndDate($endDate)
    {
        $this->endDate = $endDate;

        return $this;
    }

    /**
     * Get endDate
     *
     * @return \DateTime
     */
    public function getEndDate()
    {
        return $this->endDate;
    }

    /**
     *@ORM\PrePersist
     */
    public function prePersist()
    {
        if($this->getPriority() === true)
        {
            $this->folder->increaseNbTaskPrioritary();
        }
        $this->folder->increaseNbTaskPending();
    }

     /**
      * @ORM\PreRemove
      */
     public function preRemove()
     {
         if($this->getPriority() === true){
            $this->getFolder()->decreaseNbTaskPrioritary();
            $this->folder->decreaseNbTaskPending();
         } else if ($this->getStatus() === true){
             $this->getFolder()->decreaseNbTaskDone();
         }
     }
}
